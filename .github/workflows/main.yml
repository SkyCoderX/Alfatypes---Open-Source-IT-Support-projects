name: General CI/CD Workflow

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch
  workflow_dispatch:  # Allows manual triggering of the workflow from the GitHub UI

jobs:
  # Job 1: General checks (linting, formatting, etc.)
  checks:
    runs-on: ubuntu-latest  # Using Ubuntu as the runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # This will check out your repository

      - name: Set up environment
        run: |
          echo "Setting up environment..."

      # Add a linting step or other checks (example for a general check, could be shell scripts)
      - name: Run linting/checks
        run: |
          echo "Run your linting or validation commands here"
          # For example, if it's a codebase, you could run something like:
          # npm run lint or python -m flake8

  # Job 2: Deployment (if you want to deploy automatically after passing checks)
  deploy:
    runs-on: ubuntu-latest
    needs: checks  # This ensures that 'deploy' runs only after 'checks' pass

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up deployment environment
        run: |
          echo "Setting up deployment environment..."

      # Add your deployment steps here, it could be FTP, AWS, Heroku, etc.
      - name: Deploy application
        run: |
          echo "Add deployment commands here."
          # Example:
          # git remote add origin https://github.com/username/repository.git
          # git push origin main
          
      # If deploying to a cloud service (e.g., AWS, Heroku), you'd need to set up API keys in GitHub Secrets
      # and use them in the `env` section like so:
      # env:
      #   HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      # run: |
      #   git push heroku main
